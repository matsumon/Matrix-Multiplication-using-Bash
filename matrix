dims()
{
	if [ $# == 1 ]
	then
		cat $1 > full
	else
		cat > full
	fi
	head -n1 < full > temp
	wc -l < full > dims
	wc -w < temp >> dims
	tr -s '\n' ' ' < dims > main 
	read line rest < main
	echo -e "$line $rest" > main
	cat  main
	rm -rf full temp dims main 
	return '0'
}
transpose()
{
	if [ $# == 1 ]
	then
		cat $1 > full
	else
		cat > full
	fi
	head -n1 < full > temp
	wc -w < temp > cols
	row_var=0
	wc -l < full > rows
	read num_rows < rows
	num_rows=$(($num_rows + 1))
	read first last < cols
	i='0'
	while [ $first -ne $i ]	
	do
	(( i++ ))
	cut -f $i full > newFile
	tr -s "\n" "\t" < newFile > temp
	read line < temp  
	echo -e "$line" >> dim_main	
	done
	cat dim_main
	rm -rf cols rows temp full newFile dim_main 
	return 0
}
add()
{
	if [[ $# != 2 ]]
	then
		1>&2
		exit 1
	fi
	if [[ $(dims $1) != $(dims $2) ]]
	then 
		1>&2
		exit 1
	fi
	dims $1> d12
	cat $1 > m1
	cat $2 > m2
	read rows cols < d12
	i=1
	while read -a m1_array     
	do
		for (( c=1; c<$rows+1; c++))
		do
			if [[ $i == $c ]]
			then
				head -n$c < m2 >temp_m2
				tail -n1 < temp_m2 > testing
			fi
		done
		read -a m2_array < testing
		for (( d=0; d<$cols; d++))
		do
			m1_element=${m1_array[d]}
			m2_element=${m2_array[d]}
			added_element=$(expr $m1_element + $m2_element) 
			if (($d != $cols-1))
			then
			echo -ne "$added_element\t" >> mainAdd
			else
			echo -e "$added_element" >> mainAdd
			fi
		done
		((i++))
	done < m1 
	cat mainAdd
	rm -rf m1 m2 testing temp_m2 mainAdd d12
}

multiply()
{
	cat $1 > left
	cat $2 > right
	dims < left > m1
	dims < right > m2
	read m1_row m1_col < m1
	read m2_row m2_col < m2
	if (( $m1_col != $m2_row ))
	then
		echo "missmatching matrices"
		1>&2
		exit 1
	else
		transpose < right >fixedm2
	fi
}

if [ "$1" == "dims" ]
then
	dims $2
	
elif [ "$1" == "transpose" ]
then
	transpose $2
elif [ "$1" == "add" ]
then
	add $2 $3
elif [ "$1" == "multiply" ]
then
	multiply $2 $3
fi
