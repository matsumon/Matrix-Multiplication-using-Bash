dims()
{
	if [ $# == 1 ]
	then
		cat $1 > full
	else
			cat > full
	fi
	head -n1 < full > temp
	wc -l < full > dims
	wc -w < temp >> dims
	tr -s '\n' ' ' < dims > main 
	read line rest < main
	echo -e "$line $rest" > main
	cat  main
	rm -rf full temp dims main 
	return '0'
}
transpose()
{
	if [ $# == 1 ]
	then
		cat $1 > full
	else
		cat > full
	fi
	head -n1 < full > temp
	wc -w < temp > cols
	row_var=0
	wc -l < full > rows
	read num_rows < rows
	num_rows=$(($num_rows + 1))
	read first last < cols
	i='0'
	while [ $first -ne $i ]	
	do
	(( i++ ))
	cut -f $i full > newFile
	tr -s "\n" "\t" < newFile > temp
	read line < temp  
	echo -e "$line" >> dim_main	
	done
	cat dim_main
	rm -rf cols rows temp full newFile dim_main 
	return 0
}
add()
{
	if [[ $# != 2 ]]
	then
		1>&2 echo "You didnt upload 2 matrices"
		exit 1
	fi
	if [[ $(dims $1) != $(dims $2) ]]
	then 
		1>&2 echo "Your matrices do not have the proper dimensions"
		exit 1
	fi
	dims $1> d12
	cat $1 > m1
	cat $2 > m2
	read rows cols < d12
	i=1
	while read -a m1_array     
	do
		for (( c=1; c<$rows+1; c++))
		do
			if [[ $i == $c ]]
			then
				head -n$c < m2 >temp_m2
				tail -n1 < temp_m2 > testing
			fi
		done
		read -a m2_array < testing
		for (( d=0; d<$cols; d++))
		do
			m1_element=${m1_array[d]}
			m2_element=${m2_array[d]}
			added_element=$(expr $m1_element + $m2_element) 
			if (($d != $cols-1))
			then
			echo -ne "$added_element\t" >> mainAdd
			else
			echo -e "$added_element" >> mainAdd
			fi
		done
		((i++))
	done < m1 
	cat mainAdd
	rm -rf m1 m2 testing temp_m2 mainAdd d12
}

multiply()
{
	cat $1 > left
	cat $2 > right
	dims < left > m1
	dims < right > m2
	read m1_row m1_col < m1
	read m2_row m2_col < m2
	if (( $m1_col != $m2_row ))
	then
		1>&2 echo "missmatching matrices $m1_col , $m2_row " 
		exit 1
	else
		transpose < right >fixedm2
	fi
	while read -a m1_array     
	do
		added_element=0
		q=0
		while read -a m2_array
		do
				for (( d=0; d<$(expr $m2_row); d++ ))
				do
				m1_element=${m1_array[d]}
				m2_element=${m2_array[d]}
				trans=$(expr ${m1_element} \* ${m2_element})
				copy=$added_element
				added_element=$(expr ${copy} + ${trans}) 
				if (( $d == $(( $m2_row - 1 )) ))
				then
					if (( $q == $m2_col-1 || $m2_col == 1 ))
					then
						q=0
					echo -e "$added_element" >> mainMult
					added_element=0
					else
						echo -ne "$added_element\t" >> mainMult
						added_element=0
						((q++))
					fi
				fi
				done
		done < fixedm2
		((i++))
	done < left 
	cat mainMult
	rm -rf left right m1 m2 fixedm2 mainMult
}
mean()
{
	if [ $# == 1 ]
		then
			cat $1 > holder
		else
			cat > holder
	fi
	transpose holder > m1
	dims m1 > dims_m1
	read rows cols < dims_m1
	q=1	
	while read -a array
	do
		sum=0
		for (( c=0; c<$cols; c++))
		do
			sum=$(( $sum + ${array[c]} ))	
		done
		if (( $q != $rows ))
		then
			total=$(( ($sum + ($cols/2)*( ($sum>0)*2-1 )) / $cols))
			echo -ne "$total\t" >> mean
		else
			total=$(( ($sum + ($cols/2)*( ($sum>0)*2-1 )) / $cols))
			echo -e "$total" >> mean
		fi
		((q++))
	done < m1
	cat mean
	rm -rf dims_m1 m1 holder mean

}

trap 'rm -rf full temp dims main cols rows temp full newFile dim_main m1 m2 testing temp_m2 mainAdd d12 left right m1 m2 fixedm2 mainMult dims_m1 m1 holder mean; exit 1' ERR INT HUP SIGTERM


if [ "$1" == "dims" ]
then
	if (( $# > 2 ))
	then
		1>&2 echo "Too many arguments to dims"
		exit 1
	fi
	if (( $# == 2 ))
	then
		if [[ -r $2  ]] 
		then
			dims $2
		else
			1>&2 echo "Your File Sucks"
			exit 1
		fi
	else
		dims $2
	fi
	
elif [ "$1" == "transpose" ]
then
	if (( $# > 2 ))
	then
		1>&2 echo "Too Many Arguments"
		exit 1
	fi
	if (( $# == 2 ))
	then
		if [[ -r $2 ]]
		then
			transpose $2
		else
			1>&2 echo "unreadable file"
			exit 1
		fi
	else
		transpose 
	fi
elif [ "$1" == "add" ]
then
	add $2 $3
elif [ "$1" == "multiply" ]
then
	multiply $2 $3
elif [ "$1" == "mean" ]
then
	mean $2 
else
	1>&2 echo "You either didnt specify a command or your command is invalid"
	exit 1
fi
exit 0
